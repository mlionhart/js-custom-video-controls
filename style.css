/* import custom web font. This is an icon font - all the chars of the alphabet
equate to common icons you might want to use in an application */
@font-face {
    font-family: 'HeydingsControlsRegular';
    src: url('fonts/heydings_controls-webfont.eot');
    src: url('fonts/heydings_controls-webfont.eot?#iefix') format('embedded-opentype'),
         url('fonts/heydings_controls-webfont.woff') format('woff'),
         url('fonts/heydings_controls-webfont.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

video {
  border: 1px solid black;
  cursor: pointer;
}

p {
  position: absolute;
  top: 310px;
}

.player {
  position: absolute;
}

.controls {
  visibility: hidden;
  opacity: 0.5;
  width: 400px;
  border-radius: 10px;
  position: absolute;
  bottom: 20px;
  left: 50%;
  margin-left: -200px;
  background-color: black;
  box-shadow: 3px 3px 5px black;
  transition: 1s all;
  display: flex;
}

button, .controls {
  background: linear-gradient(to bottom,#222,#666);
}

.player:hover .controls, player:focus .controls {
  opacity: 1;
}

/* use generated content to display an icon on each button. content property
is being set to be equal to the contents of the data-icon attribute. (e.g. Play ="P")
in the custom font specified, "P" is actually a "play" icon. Icon fonts are very cool
for many reasons: cutting down on HTTP requests because you don't need to download
those icons as image files, great scalability, and the fact that you can use text
properties to style them - like "color" and "text-shadow". */
button:before {
  font-family: HeydingsControlsRegular; /* apply custom font */
  font-size: 20px;
  position: relative;
  content: attr(data-icon);
  color: #aaa;
  text-shadow: 1px 1px 0px black;
}

.play:before {
  font-size: 22px;
}


button, .timer {
  height: 38px;
  line-height: 19px;
  box-shadow: inset 0 -5px 25px rgba(0,0,0,0.3);
  border-right: 1px solid #333;
}

button {
  position: relative;
  border: 0;
  flex: 1;
  outline: none;
}

.play {
  border-radius: 10px 0 0 10px;
}

.fwd {
  border-radius: 0 10px 10px 0;
}

/* we set the outer .timer elem to have flex: 5, so it takes up most of the width
of the controls bar. We also give it position: relative, so that we can position
elements inside it conveniently according to its boundaries, and not the 
boundaries of the body element. */
.timer {
  line-height: 38px;
  font-size: 10px;
  font-family: monospace;
  text-shadow: 1px 1px 0px black;
  color: white;
  flex: 5;
  position: relative;
  cursor: default;
}

/* the inner div is absolutely positioned to sit directly on top of the outer <div>.
It is also given an initial width of 0, so you can't see it at all. As the video 
plays, the width will be increased via JS as the video elapses. */
.timer div {
  position: absolute;
  background-color: rgba(255,255,255,0.2);
  left: 0;
  top: 0;
  width: 0;
  height: 38px;
  z-index: 2;
}

/* the span is also absolutely positioned to sit near the lH side eof the timer bar. 
We also gave our inner div and span the right amount of z-index so that the timer will
be displayed on top, and the inner <div> below that. That way, we make sure we can see
all the information - one box is not obscuring another. */
.timer span {
  position: absolute;
  z-index: 3;
  left: 19px;
}

button:hover,button:focus {
  box-shadow: inset 1px 1px 2px black;
}

button:active {
  box-shadow: inset 3px 3px 2px black;
}

.active:before {
  color: red;
}
